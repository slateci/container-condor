#!/bin/bash
#
# This script probes a system for properties useful for OSG-XD,
# OSG-Direct and OSG-Connect users. To be able to support both
# integration with GlideinWMS and HTCondor startd cron, argv1 is used
# to determine what mode we are in. If argv1 points to a glidein_config
# file, GlideinWMS mode is assumed. If argv1 is "NONE", HTCondor startd
# cron mode is assumed.
#
# More information:
#    http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/doc.prd/factory/custom_scripts.html
#    http://research.cs.wisc.edu/htcondor/manual/v8.2/4_4Hooks.html
#
# Example HTCondor startd cron entry:
#
# STARTD_CRON_JOBLIST = $(STARTD_CRON_JOBLIST) osgvo
# STARTD_CRON_osgvo_EXECUTABLE = /opt/osgvo/osgvo-node-advertise
# STARTD_CRON_osgvo_PERIOD = 30m
# STARTD_CRON_osgvo_MODE = periodic
# STARTD_CRON_osgvo_RECONFIG = true
# STARTD_CRON_osgvo_KILL = true
# STARTD_CRON_osgvo_ARGS = NONE

glidein_config="$1"

function info {
    echo "INFO  " $@ 1>&2
}

function my_warn {
    echo "WARN  " $@ 1>&2
}

function advertise {
    # atype is the type of the value as defined by GlideinWMS:
    #   I - integer
    #   S - quoted string
    #   C - unquoted string (i.e. Condor keyword or expression)
    key="$1"
    value="$2"
    atype="$3"

    if [ "$glidein_config" != "NONE" ]; then
        add_config_line_safe $key "$value"
        add_condor_vars_line $key "$atype" "-" "+" "Y" "Y" "+"
    fi

    if [ "$atype" = "S" ]; then
        echo "$key = \"$value\""
    else
        echo "$key = $value"
    fi
}

function get_glidein_config_value {
    # extracts a config attribute value from 
    # $1 is the attribute key
    CF=$glidein_config
    if [ "$glidein_config" = "NONE" ]; then
        CF="$PWD/glidein_config"
    fi
    KEY="$1"
    VALUE=`(cat $CF | grep "^$KEY " | tail -n 1 | sed "s/^$KEY //") 2>/dev/null`
    echo "$VALUE"
}

function singularityfy_path {
    ORIG="$1"
    # Are we replacing a gwms path? If so, use the safer expression which
    if (echo "$ORIG" | grep "glide_") >/dev/null 2>&1; then
        echo "$ORIG" | sed -E "s;.*/glide_[a-zA-Z0-9]+(.*);/srv\1;"
    else
        echo "$ORIG" | sed -E "s;$PWD;/srv;"
    fi
}

if [ "x$OSG_SINGULARITY_REEXEC" = "x" ]; then
    info "This is a setup script for the OSG-FLOCK frontend."
    info "In case of problems, contact Mats Rynge (rynge@isi.edu)"
    info "Running in directory $PWD"
 
    # some sites do not have PATH set
    if [ "x$PATH" = "x" ]; then
        export PATH="/usr/local/bin:/usr/bin:/bin"
        my_warn "PATH is empty, setting it to $PATH"
    fi
    info "PATH is set to $PATH"

    info "The following aliases are set:"
    alias 1>&2 || true
else
    info "Now running inside a singularity container"
fi

if [ "x$glidein_config" = "x" ]; then
    glidein_config="NONE"
    info "No arguments provided - assuming HTCondor startd cron mode"
else
    info "Arguments to the script: $@"
fi

if [ "$glidein_config" != "NONE" ]; then
    ###########################################################
    # import advertise and add_condor_vars_line functions
    if [ "x$add_config_line_source" = "x" ]; then
        export add_config_line_source=`grep '^ADD_CONFIG_LINE_SOURCE ' $glidein_config | awk '{print $2}'`
        export condor_vars_file=`grep -i "^CONDOR_VARS_FILE " $glidein_config | awk '{print $2}'`
    fi

    # full path is problematic as sometimes we are inside a container - however, looks like
    # the file is always named "add_config_line.source", so use that
    add_config_line_source=$PWD/add_config_line.source

    info "Sourcing $add_config_line_source"
    source $add_config_line_source
fi

###########################################################
# We have two env variables which can be added to in this
# script to provide an expression for the START expression
# and a general warnings string which gets published in the
# ad. These are env variables until the end.
export GLIDEIN_VALIDATION_EXPR="True"
export GLIDEIN_VALIDATION_WARNINGS=""

###########################################################
#
#  some of the following checks has to take place outside
#  singularity, some inside. First the set we need outside:
#

if [ "x$OSG_SINGULARITY_REEXEC" = "x" ]; then

    # we need the "outside" kernel version to be able to steer
    # singularity jobs to kernel/glibcs which are not too old
    VER=`uname -r | sed 's/-.*//'`
    MAJ=`echo $VER | sed -E 's/([0-9]+)\.([0-9]+)\.([0-9]+)/\1/'`
    MIN=`echo $VER | sed -E 's/([0-9]+)\.([0-9]+)\.([0-9]+)/\2/'`
    PATCH=`echo $VER | sed -E 's/([0-9]+)\.([0-9]+)\.([0-9]+)/\3/'`
    VER=$(( 10000 * $MAJ + 100 * $MIN + $PATCH ))
    if [ "x$VER" != "x" ]; then
        if [ $VER -gt 10000 ]; then
            advertise OSG_HOST_KERNEL_VERSION "$VER" "I"
        fi
    fi

    ##################
    # cvmfs filesystem availability
    info "Checking for CVMFS availability and attributes..."
    for FS in \
       ams.cern.ch \
       atlas.cern.ch \
       cms.cern.ch \
       connect.opensciencegrid.org \
       desdm.osgstorage.org \
       gwosc.osgstorage.org \
       icecube.opensciencegrid.org \
       ligo-containers.opensciencegrid.org \
       nexo.opensciencegrid.org \
       oasis.opensciencegrid.org \
       singularity.opensciencegrid.org \
       snoplus.egi.eu \
       spt.opensciencegrid.org \
       stash.osgstorage.org \
       veritas.opensciencegrid.org \
       xenon.opensciencegrid.org \
    ; do
        FS_CONV=`echo "$FS" | sed 's/[\.-]/_/g'`
        FS_ATTR="HAS_CVMFS_$FS_CONV"
        RESULT="False"
        
        # keep the filesystems mounted
        ls -l /cvmfs/$FS/ >/dev/null 2>&1

        if [ -e /cvmfs/$FS/. ]; then
            RESULT="True"
            # add the revision
            REV_ATTR="CVMFS_${FS_CONV}_REVISION"
            REV_VAL=`/usr/bin/attr -q -g revision /cvmfs/$FS/. 2>/dev/null`
            
            # oasis.opensciencegrid.org needs extra checks
            if [ "x$FS" = "xoasis.opensciencegrid.org" ]; then
                if ! cat /cvmfs/oasis.opensciencegrid.org/osg/sw/module-init.sh >/dev/null 2>&1; then
                    REV_VAL=""
                fi
                if ! cat /cvmfs/oasis.opensciencegrid.org/sbgrid/update.details >/dev/null 2>&1; then
                    REV_VAL=""
                fi
            fi

            # oasis.opensciencegrid.org needs extra checks
            if [ "x$FS" = "xoasis.opensciencegrid.org" ]; then
                if ! cat /cvmfs/oasis.opensciencegrid.org/osg/sw/module-init.sh >/dev/null 2>&1; then
                    REV_VAL=""
                fi
                if ! cat /cvmfs/oasis.opensciencegrid.org/sbgrid/update.details >/dev/null 2>&1; then
                    REV_VAL=""
                fi
            fi

            # stash.osgstorage.org needs extra checks
            if [ "x$FS" = "xstash.osgstorage.org" ]; then
                if ! cat /cvmfs/stash.osgstorage.org/user/bbockelm/public/testfile >/dev/null 2>&1; then
                    REV_VAL=""
                fi
            fi
            
            # veritas.opensciencegrid.org
            if [ "x$FS" = "xveritas.opensciencegrid.org" ]; then
                if ! cat /cvmfs/veritas.opensciencegrid.org/py2-v1/setup.sh >/dev/null 2>&1; then
                    REV_VAL=""
                fi
            fi

            # now we are ready to advertise
            if [ "x$REV_VAL" != "x" ]; then
                # make sure it is an integer
                if [ "$REV_VAL" -eq "$REV_VAL" ] 2>/dev/null; then
                    advertise $FS_ATTR "$RESULT" "C"
                    advertise $REV_ATTR "$REV_VAL" "I"
                fi
            else
                # unable to determine revision - this is common on sites which re-export CVMFS
                # via for example NFS locally. Advertise availability.
                advertise $FS_ATTR "$RESULT" "C"
            fi
        fi
    done

    # if it looks like we have CVMFS, make sure the START expression knows that
    #if [ -e /cvmfs ]; then
    #    export GLIDEIN_VALIDATION_EXPR="HAS_CVMFS_oasis_opensciencegrid_org && HAS_CVMFS_singularity_opensciencegrid_org && HAS_CVMFS_stash_osgstorage_org"
    #fi

    # update timestamp?
    TS_ATTR="CVMFS_oasis_opensciencegrid_org_TIMESTAMP"
    TS_VAL=`(cat /cvmfs/oasis.opensciencegrid.org/osg/update.details  | egrep '^Update unix time:' | sed 's/.*: //') 2>/dev/null`
    if [ "x$TS_VAL" != "x" ]; then
        # make sure it is an integer
        if [ "$TS_VAL" -eq "$TS_VAL" ] 2>/dev/null; then
            advertise $TS_ATTR "$TS_VAL" "I"
        fi
    fi

    ###########################################################
    # system attributes from the host

    VIRTUALIZATION=`(systemd-detect-virt) 2>/dev/null`
    if [ "x$VIRTUALIZATION" != "x" ]; then
        advertise VIRTUALIZATION_TECHNOLOGY "$VIRTUALIZATION" "S"
    fi

    ###########################################################
    # gpus - detect this outside Singularity

    if [ "x$CUDA_VISIBLE_DEVICES" != "x" ]; then

        info "Checking for GPUs because CUDA_VISIBLE_DEVICES=$CUDA_VISIBLE_DEVICES"

        rm -f gpu.ad

        for LOCATION in \
              /usr/libexec/condor/condor_gpu_discovery \
              ./main/condor/libexec/condor_gpu_discovery \
              ../main/condor/libexec/condor_gpu_discovery \
        ; do
            if [ -e "$LOCATION" ]; then
                ($LOCATION -properties -extra -cuda ; $LOCATION -properties -extra -opencl) \
                    | grep -v DetectedGPUs \
                    | sort | uniq \
                    >gpu.ad 
                break
            fi
        done
        
        if [ -s gpu.ad ]; then
            while read line; do
                key=`echo "$line" | sed 's/=.*//'`
                value=`echo "$line" | sed 's/.*=//'`
                if (echo "$value" | grep '"') >/dev/null 2>&1; then
                    value=`echo "$value" | sed 's/"//g'`
                    advertise "$key" "$value" "S"
                else
                    advertise "$key" "$value" "C"
                fi
            done <gpu.ad
        
            # and some extra nvidia attributes
            nvidia_version=`(nvidia-smi | grep "Driver Version" | sed 's/.*: *//' | awk '{print $1;}') 2>/dev/null`
            if [ "x$nvidia_version" != "x" ]; then
                advertise NV_DRIVER "$nvidia_version" "C"
            fi
        else
            my_warn "GPU detection failed!"
            advertise "GPUDetection" "No GPUs detected" "S"
        fi
    fi

    # xcache - has to be outside due to the ping requirement
    XCACHE_CLOSEST=""
    XCACHE_CLOSEST_RTT="-1"
    if [ -e $TEST_FILE_4H.xcache_closest ]; then
        XCACHE_CLOSEST=`cat $TEST_FILE_4H.xcache_closest`
        XCACHE_CLOSEST_RTT=`cat $TEST_FILE_4H.xcache_closest_rtt`
    else
        XCACHE_CLOSEST=`attr -qg external_host /cvmfs/stash.osgstorage.org| sed 's~http[s]*://~~g' | sed 's/.\{6\}$//' 2>/dev/null`
        # test first using the cached cvmfs values
	if [ "X$XCACHE_CLOSEST" != "X" ]; then
            XCACHE_CLOSEST=`(export PATH=/cvmfs/oasis.opensciencegrid.org/osg/modules/stashcp/5.1.2/bin:/cvmfs/oasis.opensciencegrid.org/osg/modules/xrootd/4.2.1/bin:$PATH &&stashcp --closest | sed 's;root://;;') 2>/dev/null`
        fi
        if [ "X$XCACHE_CLOSEST" != "X" ]; then
            echo "$XCACHE_CLOSEST" > $TEST_FILE_4H.xcache_closest
            # also want the RTT
            XCACHE_CLOSEST_RTT=`(ping -c 3 $XCACHE_CLOSEST | grep time | awk '{ print $8 }' | awk -F '=' '{ total += $2; count++ } END { print total/3 }') 2>/dev/null`
            echo "$XCACHE_CLOSEST_RTT" >$TEST_FILE_4H.xcache_closest_rtt
        else
            echo "" > $TEST_FILE_4H.xcache_closest
            echo "-1" > $TEST_FILE_4H.xcache_closest_rtt
        fi
    fi
    advertise XCACHE_CLOSEST "$XCACHE_CLOSEST" "S"
    advertise XCACHE_CLOSEST_RTT "$XCACHE_CLOSEST_RTT" "C"

fi # OSG_SINGULARITY_REEXEC

##################
# singularity
# advertise availability and version

if [ "x$OSG_SINGULARITY_REEXEC" = "x" ]; then
    info "Checking for singularity..."

    # set up the env to make sure Singularity uses the glidein dir for exported /tmp, /var/tmp
    if [ "x$GLIDEIN_Tmp_Dir" != "x" -a -e "$GLIDEIN_Tmp_Dir" ]; then
        export SINGULARITY_WORKDIR=$GLIDEIN_Tmp_Dir/adv-singularity-work.$$
    fi

    HAS_SINGULARITY="False"
    export OSG_SINGULARITY_VERSION=`(singularity --version | sed 's/singularity version //') 2>/dev/null`
    if [ "x$OSG_SINGULARITY_VERSION" != "x" ]; then
        HAS_SINGULARITY="True"
        export OSG_SINGULARITY_PATH=`which singularity 2>/dev/null`
    else
        # some sites requires us to do a module load first - not sure if we always want to do that
        export OSG_SINGULARITY_VERSION=`module load singularity >/dev/null 2>&1; singularity --version 2>/dev/null`
        if [ "x$OSG_SINGULARITY_VERSION" != "x" ]; then
            HAS_SINGULARITY="True"
            export OSG_SINGULARITY_PATH=`module load singularity >/dev/null 2>&1; which singularity`
        else
            info "Unable to find singularity in PATH=$PATH"
        fi
    fi
    if [ "x$HAS_SINGULARITY" = "xTrue" ]; then
        # one last check - make sure we could determine the path to singularity
        if [ "x$OSG_SINGULARITY_PATH" = "x" ]; then
            my_warn "Looks like we found Singularity, but were unable to determine the full path to the executable"
            HAS_SINGULARITY="False"
        else
            info "Singularity binary appears present in $OSG_SINGULARITY_PATH and claims to be version $OSG_SINGULARITY_VERSION"
        fi
    fi

    # default image for this glidein - us a distribution between different OSes
    # this can be controlled a parameter in the frontend config: OSG_SINGULARITY_EL7_PERCENT
    export OSG_SINGULARITY_EL7_PERCENT=`get_glidein_config_value OSG_SINGULARITY_EL7_PERCENT`
    if [ "x$OSG_SINGULARITY_EL7_PERCENT" = "x" ]; then
        # default if not specified in the config
        export OSG_SINGULARITY_EL7_PERCENT=0
    fi
    if [ ! -e .osgvo-default-singularity-image ]; then
        let "rand = $RANDOM % 100 + 1"
        if [ $rand -le $OSG_SINGULARITY_EL7_PERCENT ]; then
            echo "/cvmfs/singularity.opensciencegrid.org/opensciencegrid/osgvo-el7:latest" >.osgvo-default-singularity-image
        else
            echo "/cvmfs/singularity.opensciencegrid.org/opensciencegrid/osgvo-el6:latest" >.osgvo-default-singularity-image
        fi
    fi
    export OSG_SINGULARITY_IMAGE_DEFAULT=`cat .osgvo-default-singularity-image`
    info "Using $OSG_SINGULARITY_IMAGE_DEFAULT as the default Singularity image"

    # for now, we will only advertise singularity on nodes which can access cvmfs
    if [ ! -e "$OSG_SINGULARITY_IMAGE_DEFAULT" ]; then
        info "Default singularity image, $OSG_SINGULARITY_IMAGE_DEFAULT, does not appear to exist"
        HAS_SINGULARITY="False"
    fi
        
    OSG_SINGULARITY_EXTRA_OPTS="--pwd /srv --bind /cvmfs"
        
    # Binding different mounts
    for MNTPOINT in \
        /hadoop \
        /hdfs \
        /lizard \
        /mnt/hadoop \
        /mnt/hdfs \
    ; do
        if [ -e $MNTPOINT/. -a -e $OSG_SINGULARITY_IMAGE_DEFAULT/$MNTPOINT ]; then
            OSG_SINGULARITY_EXTRA_OPTS="$OSG_SINGULARITY_EXTRA_OPTS --bind $MNTPOINT"
        fi
    done

    OSG_SINGULARITY_EXTRA_OPTS="$OSG_SINGULARITY_EXTRA_OPTS --contain --ipc --pid"

    # Let's do a simple singularity test by echoing something inside, and then
    # grepping for it outside. This takes care of some errors which happen "late"
    # in the execing, like:
    # ERROR  : Could not identify basedir for home directory path: /
    if [ "x$HAS_SINGULARITY" = "xTrue" ]; then
        info "$OSG_SINGULARITY_PATH exec --home $PWD:/srv $OSG_SINGULARITY_EXTRA_OPTS $OSG_SINGULARITY_IMAGE_DEFAULT echo Hello World | grep Hello World"
        if ! ($OSG_SINGULARITY_PATH exec --home $PWD:/srv \
                                         $OSG_SINGULARITY_EXTRA_OPTS \
                                         "$OSG_SINGULARITY_IMAGE_DEFAULT" \
                                         echo "Hello World" \
                                         | grep "Hello World") 1>&2 \
        ; then
            # singularity simple exec failed - we are done
            info "Simple singularity exec inside $OSG_SINGULARITY_IMAGE_DEFAULT failed."
            HAS_SINGULARITY="False"
        fi
    fi
    
    # also verify that the env is inherited correctly
    if [ "x$HAS_SINGULARITY" = "xTrue" ]; then
        info "$OSG_SINGULARITY_PATH exec --home $PWD:/srv $OSG_SINGULARITY_EXTRA_OPTS $OSG_SINGULARITY_IMAGE_DEFAULT env | grep OSG_SINGULARITY_IMAGE_DEFAULT"
        if ! ($OSG_SINGULARITY_PATH exec --home $PWD:/srv \
                                         $OSG_SINGULARITY_EXTRA_OPTS \
                                         "$OSG_SINGULARITY_IMAGE_DEFAULT" \
                                         env \
                                         | grep OSG_SINGULARITY_IMAGE_DEFAULT) 1>&2 \
        ; then
            # singularity env fail - we are done
            my_warn "Singularity is not inheriting the outside environment"
            HAS_SINGULARITY="False"
        fi
    fi

    # If we still think we have singularity, we should re-exec this script within the default
    # container so that we can advertise that environment
    if [ "x$HAS_SINGULARITY" = "xTrue" ]; then
        # We want to map the full glidein dir to /srv inside the container. This is so 
        # that we can rewrite env vars pointing to somewhere inside that dir (for
        # example, X509_USER_PROXY)
        export SING_OUTSIDE_BASE_DIR=`echo "$PWD" | sed -E "s;(.*/glide_[a-zA-Z0-9]+).*;\1;"`

        # Make a copy of the user proxy - sometimes this lives outside the glidein dir
        if [ "x$X509_USER_PROXY" != "x" -a -e "$X509_USER_PROXY" ]; then
            info "Making a copy of the provided X509_USER_PROXY=$X509_USER_PROXY"
            cp $X509_USER_PROXY $SING_OUTSIDE_BASE_DIR/x509-pilot-proxy
            export X509_USER_PROXY=/srv/x509-pilot-proxy
        fi

        # build a new command line, with updated paths
        CMD=`singularityfy_path $0`
        # if $0 does not contain a full path, prepend /srv
        if ! (echo $0 | grep "^/") >/dev/null 2>&1; then
            CMD="/srv/$0"
        fi
        for VAR in "$@"; do
            CMD="$CMD "`singularityfy_path $VAR`
        done

        # let "inside" script know we are re-execing
        export OSG_SINGULARITY_REEXEC=1
        info "$OSG_SINGULARITY_PATH exec --home $SING_OUTSIDE_BASE_DIR:/srv $OSG_SINGULARITY_EXTRA_OPTS $OSG_SINGULARITY_IMAGE_DEFAULT $CMD"
        if $OSG_SINGULARITY_PATH exec --home $SING_OUTSIDE_BASE_DIR:/srv \
                                      $OSG_SINGULARITY_EXTRA_OPTS \
                                      "$OSG_SINGULARITY_IMAGE_DEFAULT" \
                                      $CMD \
        ; then
            # singularity worked - exit here as the rest script ran inside the container
            exit $?
        fi
    fi
    
    # if we get here, singularity is not available or not working
    advertise HAS_SINGULARITY "False" "C"

else

    if [ "x$add_config_line_source" != "x" ]; then
        export add_config_line_source=`singularityfy_path "$add_config_line_source"`
        export condor_vars_file=`singularityfy_path "$condor_vars_file"`
        info "Updated glidein config to paths inside the container: add_config_line_source=$add_config_line_source condor_vars_file=$condor_vars_file"
    fi

    # delay the advertisement until here to make sure singularity actually works
    advertise HAS_SINGULARITY "True" "C"
    advertise OSG_SINGULARITY_VERSION "$OSG_SINGULARITY_VERSION" "S"
    advertise OSG_SINGULARITY_PATH "$OSG_SINGULARITY_PATH" "S"
    advertise OSG_SINGULARITY_IMAGE_DEFAULT "$OSG_SINGULARITY_IMAGE_DEFAULT" "S"
    # for debugging - remove later
    advertise OSG_SINGULARITY_EL7_PERCENT "$OSG_SINGULARITY_EL7_PERCENT" "C"
   
    # fix up the env
    for key in X509_USER_PROXY X509_USER_CERT _CONDOR_MACHINE_AD _CONDOR_JOB_AD \
               _CONDOR_SCRATCH_DIR _CONDOR_CHIRP_CONFIG _CONDOR_JOB_IWD \
               add_config_line_source condor_vars_file ; do
        eval val="\$$key"
        val=`echo "$val" | sed -E "s;$SING_OUTSIDE_BASE_DIR(.*);/srv\1;"`
        eval $key=$val
    done

fi

#############################################################################
#
# At this point Singularity tests are done, and we can concentrate on 
# regular systems test. Some tests are too heavy-weight to run every
# 5 minutes. Such test can drop a file named $TEST_FILE_1H.NNNNNNN
# in cwd. These files will be cleaned up after 60 minutes and allow the
# test to rerun then again. There is also a 3 hour version.
#

TEST_FILE_1H=.osgvo.test-results.1h
TEST_FILE_4H=.osgvo.test-results.4h

# clean up old ones
find . -maxdepth 1 -name $TEST_FILE_1H.\* -mmin +60 -exec rm {} \;
find . -maxdepth 1 -name $TEST_FILE_4H.\* -mmin +240 -exec rm {} \;


# operating system

# /etc/issue works most of the time, but there are exceptions
OS_NAME=`cat /etc/issue | head -n1 | awk '{print $1;}' | tr '[:lower:]' '[:upper:]'`

if [ "X$OS_NAME" = "xUBUNTU" ]; then
    OS_VERSION=`cat /etc/issue | head -n1 | awk '{print $2;}'`
elif [ -e /etc/debian_version ]; then
    OS_NAME="DEBIAN"
    OS_VERSION=`cat /etc/debian_version`
elif [ "X$OS_NAME" = "xFEDORA" ]; then
    OS_VERSION=`cat /etc/issue | head -n1 | awk '{print $3;}'`
elif [ -e /etc/redhat-release ]; then
    OS_NAME="RHEL"
    OS_VERSION=`cat /etc/redhat-release | grep -o -E ' [0-9]+.[0-9]+'`
elif [ -e /etc/rocks-release ]; then
    OS_NAME="RHEL"
    OS_VERSION=`cat /etc/rocks-release | grep -o -E ' [0-9]+.[0-9]+'`
elif [ -e /etc/SuSE-release ]; then
    OS_NAME="SUSE"
    OS_VERSION=`cat /etc/SuSE-release | grep VERSION | grep -o -E ' [0-9]+'`
fi

# remove spaces/tabs in the version
OS_VERSION=`echo $OS_VERSION | sed 's/[ \t]//g'`

# remove / in the version
OS_VERSION=`echo $OS_VERSION | sed 's/\//_/g'`

# we only want major version numbers
OS_VERSION=`echo $OS_VERSION | sed 's/[\.-].*//'`

if [ "x$OS_NAME" = "x" ]; then
    OS_NAME="Unknown"
fi
if [ "x$OS_VERSION" = "x" ]; then
    OS_VERSION="Unknown"
fi

# kernel
OS_KERNEL=`uname -r`
if [ "x$OS_KERNEL" = "x" ]; then
    OS_KERNEL="Unknown"
fi

advertise OSG_OS_NAME "$OS_NAME" "S"
advertise OSG_OS_VERSION "$OS_VERSION" "S"
advertise OSG_OS_STRING "$OS_NAME $OS_VERSION" "S"
advertise OSG_OS_KERNEL "$OS_KERNEL" "S"

# deprecated names
advertise OSGVO_OS_NAME "$OS_NAME" "S"
advertise OSGVO_OS_VERSION "$OS_VERSION" "S"
advertise OSGVO_OS_STRING "$OS_NAME $OS_VERSION" "S"
advertise OSGVO_OS_KERNEL "$OS_KERNEL" "S"

# cpu info
CPU_MODEL=`cat /proc/cpuinfo | grep -i "^model name" | head -n 1 | sed -r 's/[a-zA-Z \t]+:[ ]*//'`
advertise OSG_CPU_MODEL "$CPU_MODEL" "S"
advertise OSGVO_CPU_MODEL "$CPU_MODEL" "S"

# some cpu flags HTCondor is not yet advertising
for FLAG in `cat /proc/cpuinfo | egrep -i ^flags | head -n 1 | sed -r 's/[a-zA-Z \t]+:[ ]*//'`; do
    if (echo "$FLAG" | egrep "avx512|cx16|f16c") >/dev/null 2>&1; then
        advertise HAS_$FLAG "True" "C"
    fi
done

# if we are in Singularity, override HTCondor's OsSys* vars with the
# default container details
if [ "x$OSG_SINGULARITY_REEXEC" = "x1" ]; then
    # RHEL is CentOS in HTCondor
    if [ "x$OS_NAME" = "xRHEL" ]; then
        OS_NAME="CentOS"
    fi
    advertise OpSysLongName "Singularity Container - $OS_NAME $OS_VERSION" "S"
    advertise OpSysAndVer "${OS_NAME}${OS_VERSION}" "S"
    advertise OpSysName "$OS_NAME" "S"
    advertise OpSysShortName "$OS_NAME" "S"
    advertise OpSysMajorVer "$OS_VERSION" "I"
    advertise OpSysVer "${OS_VERSION}00" "I"
fi

##################
# ulimits

ULIMIT_STACK_SIZE=`(ulimit -s) 2>/dev/null`
if [ "x$ULIMIT_STACK_SIZE" != "x" ]; then
    if [ "X$ULIMIT_STACK_SIZE" = "Xunlimited" ]; then
        ULIMIT_STACK_SIZE=-1
    fi
    advertise ULIMIT_STACK_SIZE "$ULIMIT_STACK_SIZE" "C"
fi

##################
# stash
if (cat /stash/user/test.osgconnect.1M) >/dev/null 2>&1; then
    # ok, we can access stash, but is it ro or rw?
    if (mount | grep " /stash" | grep ro) >/dev/null 2>&1; then
        advertise StashReadOnly "True" "C"
    else
        advertise StashReadWrite "True" "C"
    fi
fi


##################
# squid

HAS_SQUID="False"
export OSG_SQUID_LOCATION=${OSG_SQUID_LOCATION:-UNAVAILABLE}
if [ "$OSG_SQUID_LOCATION" != UNAVAILABLE ]; then
    HAS_SQUID="True"
fi
advertise HAS_SQUID "$HAS_SQUID" "C"


##################
# cms software

info "Checking for CMS software..."
OSGVO_CMSSW_Path=""
if [ -r "$OSG_APP/cmssoft/cms/cmsset_default.sh" ]
then
    OSGVO_CMSSW_Path="$OSG_APP/cmssoft/cms/"
elif [ -r $VO_CMS_SW_DIR/cmsset_default.sh ]
then
    OSGVO_CMSSW_Path="$VO_CMS_SW_DIR/"
fi
if [ "x$OSGVO_CMSSW_Path" != "x" ]
then
    advertise OSGVO_CMSSW_Path "$OSGVO_CMSSW_Path" "S"
fi

OSGVO_CMSSW_Revision=""
if [ "x$OSGVO_CMSSW_Path" != "x" -a -r "$OSGVO_CMSSW_Path/etc/cms-common/revision" ]
then
    OSGVO_CMSSW_Revision=$(head -c 10 "$OSGVO_CMSSW_Path/etc/cms-common/revision")
fi
if [ "x$OSGVO_CMSSW_Revision" != "x" ]
then
    advertise OSGVO_CMSSW_Revision "$OSGVO_CMSSW_Revision - $OSGVO_CMSSW_Path/etc/cms-common/revision" "S"
fi


##################
# tcsh test

info "Attempting to determine if tcsh is available and works..."
cat >csh.test <<EOF
#!/bin/tcsh -f
/bin/true
EOF
chmod 755 csh.test
HAS_TCSH="False"
if [ -e /bin/tcsh ]; then
    if ./csh.test >/dev/null 2>&1; then
        HAS_TCSH="True"
    fi
fi
advertise HAS_TCSH "$HAS_TCSH" "C"
rm -f csh.test



# modules
RESULT="False"
find . -maxdepth 1 -name $TEST_FILE_1H.modules -mmin +8 -exec rm {} \;
if [ -e $TEST_FILE_1H.modules ]; then
    RESULT=`cat $TEST_FILE_1H.modules`
else
   # extra check to make sure we can read a file
   if cat /cvmfs/oasis.opensciencegrid.org/osg/README.txt >/dev/null 2>&1; then
      if cat /cvmfs/connect.opensciencegrid.org/modules/spack/bin/spack >/dev/null 2>&1; then
          if (. /cvmfs/oasis.opensciencegrid.org/osg/sw/module-init.sh && module avail) >/dev/null 2>&1; then
              # also make sure module avail is not throwing a stack trace
              if ! (. /cvmfs/oasis.opensciencegrid.org/osg/sw/module-init.sh && module avail 2>&1 | grep traceback) >/dev/null 2>&1; then
                  RESULT="True"
                  echo "True" > $TEST_FILE_1H.modules
              else
                  echo "False" > $TEST_FILE_1H.modules
              fi
          fi
      fi
   fi
fi
advertise HAS_MODULES "$RESULT" "C"


##################
# Java

HAS_JAVA="False"
if java -Xmx100m -version >/dev/null 2>&1; then
    HAS_JAVA="True"
fi
advertise HAS_JAVA "$HAS_JAVA" "C"


##################
# zip

HAS_ZIP="False"
if [ -e /usr/bin/zip ]; then
    HAS_ZIP="True"
fi
advertise HAS_ZIP "$HAS_ZIP" "C"

HAS_UNZIP="False"
if [ -e /usr/bin/unzip ]; then
    HAS_UNZIP="True"
fi
advertise HAS_UNZIP "$HAS_UNZIP" "C"


##################
# scp

HAS_SCP="False"
if [ -e /usr/bin/scp ]; then
    HAS_SCP="True"
fi
advertise HAS_SCP "$HAS_SCP" "C"

##################
# stashcp

# this is a one-shot test
rm -f test.txt
STASHCP_VERIFIED="False"
if [ -e $TEST_FILE_4H.stashcp ]; then
    STASHCP_VERIFIED=`cat $TEST_FILE_4H.stashcp`
elif (export PATH=/cvmfs/oasis.opensciencegrid.org/osg/modules/stashcp/5.1.2/bin:/cvmfs/oasis.opensciencegrid.org/osg/modules/xrootd/4.2.1/bin:$PATH && stashcp /user/rynge/public/test.txt .) >/dev/null 2>&1; then
    STASHCP_VERIFIED="True"
    echo "True" > $TEST_FILE_4H.stashcp
else
    echo "False" > $TEST_FILE_4H.stashcp
fi
advertise STASHCP_VERIFIED "$STASHCP_VERIFIED" "C"


##################
# guc

GUC_PATH=`which globus-url-copy 2>/dev/null`
if [ "X$GUC_PATH" = "X" ]; then
    GUC_PATH="NA"
fi
advertise GUC_PATH "$GUC_PATH" "S"

# does it work?
# this is a one-shot test
if [ "X$GUC_PATH" != "X" ]; then
    GUC_VERIFIED="False"
    if [ -e $TEST_FILE_4H.guc ]; then
        GUC_VERIFIED=`cat $TEST_FILE_4H.guc`
    elif globus-url-copy -stall-timeout 10 -notpt gsiftp://workflow.isi.edu/etc/hosts file:///dev/null >/dev/null 2>&1; then
        GUC_VERIFIED="True"
        echo "True" > $TEST_FILE_4H.guc
    else
        echo "False" > $TEST_FILE_4H.guc
    fi
    advertise GUC_VERIFIED "$GUC_VERIFIED" "C"
fi

##################
# gfal

# this is a one-shot test
GFAL_VERIFIED="False"
if [ -e $TEST_FILE_4H.gfal ]; then
    GFAL_VERIFIED=`cat $TEST_FILE_4H.gfal`
elif gfal-copy -t 30 -f gsiftp://workflow.isi.edu/etc/hosts file:///dev/null >/dev/null 2>&1; then
    GFAL_VERIFIED="True"
    echo "True" > $TEST_FILE_4H.gfal
else
    echo "False" > $TEST_FILE_4H.gfal
fi
advertise GFAL_VERIFIED "$GFAL_VERIFIED" "C"

#############################
## squid enviroment variable
WGET_PATH=`which wget 2>/dev/null`

if [ "XWGET_PATH" = "X" ]; then
    WGET_PATH="NA"
fi
advertise WGET_PATH "$WGET_PATH" "S"

#does it work?
# this is a one-shot test

if [ "X$WGET_PATH" != "X" ]; then
    SQUID_VERIFIED="False"
    if [ -e $TEST_FILE_1H.squid ]; then
        SQUID_VERIFIED=`cat $TEST_FILE_1H.squid`
    else
        info "Setting up http_proxy enviroment variable"
        info "VALUE of OSG_SQUID_LOCATION: $OSG_SQUID_LOCATION"
        env http_proxy=$OSG_SQUID_LOCATION wget -qO/dev/null http://glidein2.chtc.wisc.edu/vofrontend/monitor/
        if [ $? == 0 -a "X$OSG_SQUID_LOCATION" != "X" ]; then
            info "testing proxy succeed"
            info "setting up http_proxy to OSG_SQUID_LOCATION"
            advertise "http_proxy" $OSG_SQUID_LOCATION "S"
            SQUID_VERIFIED="true"
            echo "True" > $TEST_FILE_1H.squid
        else
            info "testing proxy failed leaving http_proxy untouched"
            echo "False" > $TEST_FILE_1H.squid
        fi    
    fi
    advertise SQUID_VERIFIED "$SQUID_VERIFIED" "C"
fi




##################
# xrdcp

HAS_XRDCP="False"
if xrdcp --version >/dev/null 2>&1; then
    HAS_XRDCP="True"
fi
advertise HAS_XRDCP "$HAS_XRDCP" "C"


##################
# timeout

HAS_TIMEOUT="False"
if /usr/bin/timeout --version >/dev/null 2>&1; then
    HAS_TIMEOUT="True"
fi
advertise HAS_TIMEOUT "$HAS_TIMEOUT" "C"


##################
# some basic libs
for LIB in \
    /lib64/libgcc_s.so.1 \
    /lib64/libglib-2.0.so.0 \
    /usr/lib64/atlas/libatlas.so.3 \
    /usr/lib64/atlas/liblapack.so.3 \
    /usr/lib64/atlas/libptf77blas.so.3 \
    /usr/lib64/libgfortran.so.3 \
    /usr/lib64/libglib-2.0.so \
    /usr/lib64/libgmp.so.3 \
    /usr/lib64/libgslcblas.so.0 \
    /usr/lib64/libgsl.so.0 \
    /usr/lib64/libgsl.so.0 \
    /usr/lib64/libgtk-x11-2.0.so.0 \
    /usr/lib64/libicuuc.so.42 \
    /usr/lib64/libstdc++.so.6 \
    /usr/lib64/libtk8.5.so \
    /usr/lib64/libxcb.so.1 \
    /usr/lib64/libXdmcp.so.6 \
    /usr/lib64/libXm.so.4 \
    /usr/lib64/libXmu.so.6 \
    /usr/lib64/libXpm.so.4 \
    /usr/lib64/libXt.so.6 \
; do
    ATTR="HAS_FILE"`echo $LIB | sed 's/[\.\/\+\-]/_/g'`
    HAS_LIB="False"
    if [ -e $LIB ]; then
        HAS_LIB="True"
    fi
    advertise $ATTR "$HAS_LIB" "C"
done

# need a better way to figure this one out
if [ -e /usr/share/doc/glib2-2.28.8 ]; then
    advertise HAS_GLIB2_228 "True" "C"
fi


##################
# gcc

HAS_GCC="False"
if gcc --version >/dev/null 2>&1; then
    HAS_GCC="True"
fi
advertise HAS_GCC "$HAS_GCC" "C"

HAS_GPP="False"
if g++ --version >/dev/null 2>&1; then
    HAS_GPP="True"
fi
advertise HAS_GPP "$HAS_GPP" "C"

##################
# R

HAS_R="False"
if R --version >/dev/null 2>&1; then
    HAS_R="True"
    R_VERSION=`(R --version 2>&1 | head -n1 | sed 's/"//g') 2>/dev/null`
    if [ "x$R_VERSION" != "x" ]; then
        advertise R_VERSION "$R_VERSION" "S"
    fi
fi
advertise HAS_R "$HAS_R" "C"


##################
# python/numpy/scipy

info "Checking for Python availability..."
if python --version >/dev/null 2>&1; then
    PYTHON_VERSION=`python --version 2>&1 | sed 's/Python //'`
    if [ "x$PYTHON_VERSION" != "x" ]; then
        advertise PYTHON_VERSION "$PYTHON_VERSION" "S"
    fi
    advertise HAS_PYTHON "True" "C"
fi

info "Checking for numpy/scipy availability..."
cat >py.check <<EOF
from numpy import array
from os.path import exists
from random import seed, shuffle
from scipy.stats import chisquare
from sys import argv
EOF

Has_Numpy_Scipy="False"
if python py.check >/dev/null 2>&1; then
    Has_Numpy_Scipy="True"
fi
advertise HAS_NUMPY "$Has_Numpy_Scipy" "C"
rm -f py.check


##################
# matlab

advertise MATLAB_COMPATIBLE "HAS_MODULES && HAS_FILE_usr_lib64_libXt_so_6" "C"


##################
# Blast

info "Checking for blast availability..."

APP_BASE=$OSG_APP/`whoami`/ncbi-blast-2.2.28+
DATA_BASE=$OSG_DATA/`whoami`/blastdb

HAS_BLAST="False"
if [ -e "$APP_BASE/bin/blastp" -a -e "$DATA_BASE/nr.00.phr" ]; then

    # let's do a specific test to make sure things work
    export BLASTDB=$OSG_DATA/`whoami`/blastdb
    export PATH=$APP_BASE/bin:$PATH
    #echo ">test query" > test.fasta
    #echo "ACGTCCGAGACGCGAGCAGCGAGCAGCAGAGCGACGAGCAGCGACGA" >> test.fasta
    #if (blastp -db nr -query test.fasta) >/dev/null; then
        HAS_BLAST="True"

        # we also want to put the dirs in the environment
        advertise BLAST_INSTALL_DIR "$APP_BASE" "S"

        advertise BLAST_DB_DIR "$DATA_BASE" "S"
    #fi
fi
advertise HAS_BLAST "$HAS_BLAST" "C"


##################
# PHSW (Matt Snowball)
#
#info "Checking for PHSW availability..."
#
#PHSW_RESULT="True"
#PHSWDIR=/cvmfs/oasis.opensciencegrid.org/osg/projects/phenix/snowball/phnxsw
#
#if [ -e /cvmfs/oasis.opensciencegrid.org/osg/projects/phenix/snowball/phnxsw/bin/set_grid_env.sh ]; then
#
#    if ! (source $PHSWDIR/bin/set_grid_env.sh && grid-proxy-init -version && voms-proxy-init -version) 1>&2 ; then
#        PHSW_RESULT="False"
#    fi
#    
#    (source $PHSWDIR/bin/set_grid_env.sh && globus-url-copy -version) 1>&2
#    RC=$?
#    if [ "x$RC" != "x0" -a "x$RC" != "x1" ]; then
#        PHSW_RESULT="False"
#    fi
#    
#    if ! (source $PHSWDIR/bin/set_grid_env.sh && root.exe -l -b -q) 1>&2 ; then
#        PHSW_RESULT="False"
#    fi
#else
#    PHSW_RESULT="False"
#fi
#
#advertise HAS_PHSW "$PHSW_RESULT" "C"

##################
# mostly done - update START validation expressions and warnings attribute
if [ -e .stop-glidein.stamp -o -e ../.stop-glidein.stamp ]; then
    advertise OSG_NODE_VALIDATED "False" "C"
    advertise OSG_NODE_WARNINGS "Node is shutting down due to stop-glidein file" "S"
else
    advertise OSG_NODE_VALIDATED "$GLIDEIN_VALIDATION_EXPR" "C"
    if [ "x$GLIDEIN_VALIDATION_WARNINGS" != "x" ]; then
        advertise OSG_NODE_WARNINGS "$GLIDEIN_VALIDATION_WARNINGS" "S"
    fi
fi


##################
info "All done - time to do some real work!"

